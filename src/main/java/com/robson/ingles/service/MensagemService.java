package com.robson.ingles.service;

import com.robson.ingles.dto.ComandoResposta;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
public class MensagemService {

    public ComandoResposta interpretarMensagem(String mensagem) {
        String texto = mensagem.trim().toLowerCase();

        // Respostas fixas
        Map<String, String> comandosFixos = new HashMap<>();
        comandosFixos.put("/ajuda", """
                ‚úÖ *Comandos dispon√≠veis*:
                /menu - Mostrar op√ß√µes interativas
                /noticia - Ler not√≠cias em ingl√™s
                /traduza - Traduzir um texto
                /corrigir - Corrigir uma frase
                /explicar - Explicar algo em ingl√™s
                /pronuncia - Saber como pronunciar
                /exemplo - Gerar uma frase de exemplo
                /resumir - Resumir um texto
                /conversar - Conversar em ingl√™s com explica√ß√£o
                /ebook - Sugest√£o de eBooks gratuitos
                """);

        comandosFixos.put("/menu", """
                üìö *Menu Interativo* (responda com o n√∫mero):

                1Ô∏è‚É£ /noticia - Ler uma not√≠cia em ingl√™s
                2Ô∏è‚É£ /traduza - Traduzir um texto
                3Ô∏è‚É£ /corrigir - Corrigir frase em ingl√™s
                4Ô∏è‚É£ /explicar - Explicar uma palavra/frase
                5Ô∏è‚É£ /pronuncia - Explica√ß√£o da pron√∫ncia
                6Ô∏è‚É£ /exemplo - Gerar frase de exemplo
                7Ô∏è‚É£ /resumir - Resumir um texto
                8Ô∏è‚É£ /conversar - Frase de conversa + explica√ß√£o
                9Ô∏è‚É£ /ajuda - Ver todos os comandos
                """);

        comandosFixos.put("/noticia", "üì∞ Veja not√≠cias em ingl√™s: https://news.google.com/topstories?hl=en");
        comandosFixos.put("/ebook", "üìñ Leia eBooks gratuitos em ingl√™s: https://www.gutenberg.org/");

        // Retorno de comandos fixos
        for (Map.Entry<String, String> entry : comandosFixos.entrySet()) {
            if (texto.startsWith(entry.getKey())) {
                return ComandoResposta.respostaPronta(entry.getValue());
            }
        }

        // Comandos num√©ricos do menu interativo
        switch (texto) {
            case "1" -> { return ComandoResposta.requisicaoIA("noticia", "Leia uma not√≠cia em ingl√™s."); }
            case "2" -> { return ComandoResposta.requisicaoIA("traduza", ""); }
            case "3" -> { return ComandoResposta.requisicaoIA("corrigir", ""); }
            case "4" -> { return ComandoResposta.requisicaoIA("explicar", ""); }
            case "5" -> { return ComandoResposta.requisicaoIA("pronuncia", ""); }
            case "6" -> { return ComandoResposta.requisicaoIA("exemplo", ""); }
            case "7" -> { return ComandoResposta.requisicaoIA("resumir", ""); }
            case "8" -> { return ComandoResposta.requisicaoIA("conversar", ""); }
            case "9" -> { return ComandoResposta.respostaPronta(comandosFixos.get("/ajuda")); }
        }

        // Comandos que usam IA (via prefixo)
        if (texto.startsWith("/corrigir")) {
            return ComandoResposta.requisicaoIA("corrigir", removerComando(texto, "/corrigir"));
        } else if (texto.startsWith("/traduza")) {
            return ComandoResposta.requisicaoIA("traduza", removerComando(texto, "/traduza"));
        } else if (texto.startsWith("/explicar")) {
            return ComandoResposta.requisicaoIA("explicar", removerComando(texto, "/explicar"));
        } else if (texto.startsWith("/pronuncia")) {
            return ComandoResposta.requisicaoIA("pronuncia", removerComando(texto, "/pronuncia"));
        } else if (texto.startsWith("/exemplo")) {
            return ComandoResposta.requisicaoIA("exemplo", removerComando(texto, "/exemplo"));
        } else if (texto.startsWith("/resumir")) {
            return ComandoResposta.requisicaoIA("resumir", removerComando(texto, "/resumir"));
        } else if (texto.startsWith("/conversar")) {
            return ComandoResposta.requisicaoIA("conversar", removerComando(texto, "/conversar"));
        }

        return ComandoResposta.respostaPronta("‚ùå Comando n√£o reconhecido. Digite /ajuda para ver as op√ß√µes.");
    }

    private String removerComando(String texto, String comando) {
        return texto.replaceFirst("^" + comando + "\\s*", "").trim();
    }
}
